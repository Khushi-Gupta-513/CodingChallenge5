// Task 1: Initialize inventory with product objects
const inventory = [
    { name: "Espresso", price: 3.00, quantity: 10 },
    { name: "Latte", price: 4.50, quantity: 8 },
    { name: "Cappuccino", price: 4.00, quantity: 5 },
    { name: "Mocha", price: 4.75, quantity: 6 }
];
console.log("Inventory initialized:", inventory);

// Task 2: Initialize orders array
const orders = [];
console.log("Orders array initialized:", orders);

// Task 3: Create placeOrder function
function placeOrder(customerName, orderedItems) {
    // Check if there are enough products in stock for each item
    for (let item of orderedItems) {
        let product = inventory.find(product => product.name === item.name);
        if (!product || product.quantity < item.quantity) {
            console.error(`Insufficient stock for ${item.name}. Order not placed.`);
            return;
        }
    }

    // Update inventory by subtracting the ordered quantity
    orderedItems.forEach(item => {
        let product = inventory.find(product => product.name === item.name);
        product.quantity -= item.quantity;
    });

    // Add the new order to the orders array with status 'Pending'
    orders.push({
        customerName: customerName,
        items: orderedItems,
        status: "Pending"
    });
    console.log(`Order placed for ${customerName}:`, orderedItems);
}

// Task 4: Create calculateOrderTotal function
function calculateOrderTotal(order) {
    let total = order.items.reduce((sum, item) => {
        let product = inventory.find(product => product.name === item.name);
        return sum + (product.price * item.quantity);
    }, 0);
    return total;
}

// Task 5: Create completeOrder function
function completeOrder(customerName) {
    let order = orders.find(order => order.customerName === customerName);
    if (!order) {
        console.error(`Order for ${customerName} not found.`);
        return;
    }
    order.status = "Completed";
    console.log(`Order for ${customerName} marked as Completed.`);
}

// Task 6: Create checkPendingOrders function
function checkPendingOrders() {
    let pendingOrders = orders.filter(order => order.status === "Pending");
    if (pendingOrders.length === 0) {
        console.log("No pending orders.");
    } else {
        console.log("Pending Orders:");
        pendingOrders.forEach(order => {
            console.log(`Customer: ${order.customerName}, Items: ${JSON.stringify(order.items)}, Status: ${order.status}`);
        });
    }
}

// Test Cases

// Place a new order for a customer "Khushi Gupta"
placeOrder("Khushi Gupta", [
    { name: "Espresso", quantity: 2 },
    { name: "Latte", quantity: 1 }
]);

// Calculate the total price for Khushi's order
let khushisOrder = orders.find(order => order.customerName === "Khushi Gupta");
console.log(`Total for Khushi's order: $${calculateOrderTotal(khushisOrder).toFixed(2)}`);

// Mark Khushi's order as completed
completeOrder("Khushi Gupta");

// Check pending orders (should show none)
checkPendingOrders();

// Place another order for "Jane Smith" with insufficient stock
placeOrder("Jane Smith", [
    { name: "Cappuccino", quantity: 6 }
]);

// Place a valid order for "Jane Smith"
placeOrder("Jane Smith", [
    { name: "Mocha", quantity: 2 }
]);

// Calculate the total price for Jane's order
let janesOrder = orders.find(order => order.customerName === "Jane Smith");
console.log(`Total for Jane's order: $${calculateOrderTotal(janesOrder).toFixed(2)}`);

// Check pending orders again
checkPendingOrders();
